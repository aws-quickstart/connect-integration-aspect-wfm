---
AWSTemplateFormatVersion: '2010-09-09'
Description: Aspect AWS Connect Real-Time Adherence integration
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon Connect Configuration
      Parameters:
      - AgentEventStreamArn
    - Label:
        default: AWS Quick Start configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      AgentEventStreamArn:
        default: Agent Event Kinesis Stream ARN
      QSS3BucketName:
        default: QuickStart S3 bucket name
      QSS3KeyPrefix:
        default: QuickStart S3 key prefix
Parameters:
  AgentEventStreamArn:
    Type: String
    Description: Enter the Amazon Resource Name (ARN) of the Amazon Kinesis Data Stream to which Amazon Connect delivers Agent Events.
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: connect-integration-aspect-wfm/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/real-time-adherence/AspectKinesisLambda.zip
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  DynamoDbCloudTest:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "AgentARN"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "AgentARN"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "1"
  SqsQ:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      DelaySeconds: 0
      FifoQueue: true
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 30
  LambdaRoleCloudTest:
    Type: AWS::IAM::Role
    DependsOn:
    - DynamoDbCloudTest
    - SqsQ
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Policies:
      - PolicyName: ListReadWriteAccessToAspectConnectEventsForWfmRTListenQueue
        PolicyDocument:
         Version: '2012-10-17'
         Statement:
         - Sid: VisualEditor0
           Effect: Allow
           Action:
           - sqs:GetQueueUrl
           - sqs:SendMessage
           Resource: 
             - Fn::GetAtt: SqsQ.Arn
         - Sid: VisualEditor1
           Effect: Allow
           Action: 
           - sqs:ListQueues
           Resource: "*"
      - PolicyName: ReadWriteAccessToAspectConnectEventsForWfmRTListenTable
        PolicyDocument:
         Version: '2012-10-17'
         Statement:
         - Sid: VisualEditor0
           Effect: Allow
           Action:
           - dynamodb:BatchGetItem
           - dynamodb:BatchWriteItem
           - dynamodb:PutItem
           - dynamodb:DescribeTable
           - dynamodb:GetItem
           - dynamodb:Scan
           - dynamodb:Query
           - dynamodb:UpdateItem
           Resource: 
             - Fn::GetAtt: DynamoDbCloudTest.Arn
  LambdaFunctionCloudTest:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaRoleCloudTest
    - CopyZips
    Properties:
      Handler: >-
        AspectKinesisLamda::AspectKinesisLamda.ProcessKinesisEvents::AspectKinesisHandler
      Runtime: dotnetcore2.1
      Code: 
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/real-time-adherence/AspectKinesisLambda.zip'
      Description: Send agent events to SQS Queue and update initial set in DynamoDB Table
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt LambdaRoleCloudTest.Arn
      Environment:
        Variables:
          DynamoDbTableName: !Ref DynamoDbCloudTest
          LogLevel: Debug
          SqsQueueMessageGroupId: AspectConnectEventsForWfmRTListen_GroupId
          SqsQueueName: !GetAtt SqsQ.QueueName
          SqsQueueUrl: !Ref SqsQ
          SqsQueueOwner: !Ref AWS::AccountId
          WriteEventsToQueue: 'False'
  LambdaKinesisStreamCloudTest:
   Type: AWS::Lambda::EventSourceMapping
   DependsOn:
   - LambdaFunctionCloudTest
   Properties: 
    EventSourceArn:
      Ref: AgentEventStreamArn
    FunctionName: !Ref LambdaFunctionCloudTest
    StartingPosition: TRIM_HORIZON
  UserCloudTest:
    Type: AWS::IAM::User
  PolicyCloudTest:
   Type: AWS::IAM::Policy
   DependsOn:
   - UserCloudTest
   - DynamoDbCloudTest
   - SqsQ
   - LambdaFunctionCloudTest
   Properties:  
     PolicyName: AspectConnectEventsForWfmRTListen_QueueDrainerPolicy 
     Users:
     - !Ref UserCloudTest
     PolicyDocument:
       Version: '2012-10-17'
       Statement:
       - Sid: VisualEditor0
         Effect: Allow
         Action:
         - sqs:DeleteMessage
         - sqs:GetQueueUrl
         - dynamodb:DescribeTable
         - sqs:PurgeQueue
         - sqs:ReceiveMessage
         - dynamodb:Scan
         - lambda:GetFunctionConfiguration
         - lambda:UpdateFunctionConfiguration
         - dynamodb:GetItem
         Resource:
         - Fn::GetAtt: DynamoDbCloudTest.Arn
         - Fn::GetAtt: SqsQ.Arn
         - Fn::GetAtt: LambdaFunctionCloudTest.Arn
       - Sid: VisualEditor1
         Effect: Allow
         Action:
         - sqs:ListQueues
         Resource: "*"
Outputs:
  DynamoDbTableName:
    Value: !Ref DynamoDbCloudTest
  SqsQueueUrl:
    Value: !Ref SqsQ
  LambdaFunctionName:
    Value: !Ref LambdaFunctionCloudTest
  RTAUserName:
    Value: !Ref UserCloudTest
...